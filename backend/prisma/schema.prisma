generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  googleId  String?  @unique
  name      String
  phone     String?
  role      Role     @default(USER)
  imgUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String
  imageUrl    String
  description String
  views       Int      @default(0)
  lastUpdated DateTime
  createdAt   DateTime @default(now())

  about             AboutPoint[]       @relation("ProductAbout")
  benefits          BenefitPoint[]     @relation("ProductBenefits")
  activeIngredients ActiveIngredient[] @relation("ProductIngredients")
  formulationTypes  FormulationType[]  @relation("ProductFormulations")
  crops             Crop[]             @relation("ProductCrops")
}

model AboutPoint {
  id        Int     @id @default(autoincrement())
  content   String
  product   Product @relation("ProductAbout", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model BenefitPoint {
  id        Int     @id @default(autoincrement())
  content   String
  product   Product @relation("ProductBenefits", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model ActiveIngredient {
  id        Int     @id @default(autoincrement())
  content   String
  product   Product @relation("ProductIngredients", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model FormulationType {
  id        Int     @id @default(autoincrement())
  content   String
  product   Product @relation("ProductFormulations", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Crop {
  id      Int     @id @default(autoincrement())
  content String  @unique
  product Product @relation("ProductCrops", fields: [cropId], references: [id], onDelete: Cascade)
  cropId  Int
}

model Banner {
  id            Int      @id @default(autoincrement())
  imageUrl      String
  shouldVisible Boolean
  title         String
  paragraph     String
  createdAt     DateTime @default(now())
}

// ----------------------------------------------------------------------Blog-----------------------------------------------

model Blog {
  id            String         @id @default(cuid())
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentBlocks ContentBlock[]
}

model ContentBlock {
  id     String    @id @default(cuid())
  type   BlockType
  value  String? // text (heading, paragraph) or Cloudinary image URL
  order  Int
  blogId String
  blog   Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

enum BlockType {
  bigHeading
  subHeading
  paragraph
  image
}

// ----------------------------------------------------------------------Event-----------------------------------------------

model Event {
  id           String   @id @default(uuid())
  name         String
  shortDesc    String
  heroImageUrl String
  city         String
  state        String
  date         DateTime
  timing       String
  registerLink String

  speakers  Speaker[]
  venue     Venue?
  whyAttend WhyAttendPoint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speaker {
  id       String @id @default(uuid())
  name     String
  imageUrl String
  role     String
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  String
}

model Venue {
  id           String  @id @default(uuid())
  address      String
  landmark     String?
  googleMapUrl String
  event        Event   @relation(fields: [eventId], references: [id])
  eventId      String  @unique
}

model WhyAttendPoint {
  id      String @id @default(uuid())
  point   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

enum Role {
  ADMIN
  USER
}
